input TutorInput {
  name: String
  contactNumber: String
}

input DaysOfWeekInput {
  monday: Boolean
  tuesday: Boolean
  wednesday: Boolean
  thursday: Boolean
  friday: Boolean
  saturday: Boolean
  sunday: Boolean
}

enum CourseName {
  GUITAR
  FIDDLE
  SING
  PIANO
}

enum Time {
  FIVE_TO_SIX
  SIX_TO_SEVEN
  SEVEN_TO_EIGHT
  EIGHT_TO_NINE
}

input CourseInput {
  name: CourseName
  profesor: String
  time: Time
  days: DaysOfWeekInput
}

input StudentInput {
  name: String!
  lastName: String!
  email: String
  cellphone: String
  age: String
  tutor: TutorInput
}

input EnrollStundentInput {
  period: String
  payed: Boolean
  amount: Float
  scholarship: Float
  courses: [CourseInput]
}

type Enrollment {
  id: ID!
  studentId: ID!
  period: String
  payed: Boolean
  amount: Float
  scholarship: Float
  courses: [Course]
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type EnrollStudentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  enrollment: Enrollment!
}

type CreateStudentMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  student: Student!
}

type Mutation {
  createStudent(input: StudentInput!): CreateStudentMutationResponse!
  enrollStudent(studentId: ID!, input: EnrollStundentInput!): EnrollStudentMutationResponse!
}
